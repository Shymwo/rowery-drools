package com.rowery

import com.rowery.Fact;
import com.rowery.Engine;

//-------Question-------------------------

rule "qinit"
	salience 2
	when
	then
		Engine.Question("who");
end

//---What do you really want?---

rule "miejski"
	when
		Fact(name("what"), val.equals("Jazda po mieście i robienie zakupów"));
	then
		insert(new Fact("type", "Miejski"));
end

rule "cross"
	when
		Fact(name("what"), val.equals("Szybka jazda po terenie i po szosie"));
	then
		insert(new Fact("type", "Crossowy"));
end

rule "mtb"
	when
		Fact(name("what"), val.equals("Jazda po trudnym terenie np. górskim"));
	then
		insert(new Fact("type", "Górski"));
end

rule "trek"
	when
		Fact(name("what"), val.equals("Długie wyprawy rowerowe z bagażem"));
	then
		insert(new Fact("type", "Trekkingowy"));
end

rule "szos"
	when
		Fact(name("what"), val.equals("Szybka jazda na czas"));
	then
		insert(new Fact("type", "Szosowy"));
end

rule "qtype"
	when
		(
			Fact(name("who"), val.equals("Mężczyzna"));
			or
			Fact(name("who"), val.equals("Kobieta"));
		)
	then
		Engine.Question("type");
end

rule "qwhat"
	when
		f: Fact(name("type"), val == "Nie wiem");
	then
		Engine.Question("what");
		retract(f);
end

rule "qheightsz"
	when
		(
			Fact(name("who"), val == "Mężczyzna");
			or
			Fact(name("who"),val == "Kobieta");
		)
		Fact(name("type"),val == "Szosowy");
	then
		Engine.Question("height-sz");
end


rule "qlight"
	when
		not (Fact(name("who") , val == "Dziecko"));
		not (Fact(name("light")));
	then
		Engine.Question("light");
end

rule "qlight2"
	when
		Fact(name("light"),val == "Tak");
		not Fact(name("type"), val == "Trekkingowy");
	then
		Engine.Question("light2");
end

rule "qlight3"
	when
		Fact(name("light"),val == "Tak");
		Fact(name("type"), val == "Trekkingowy");
	then
		Engine.Question("light3");
end

//rule "qbreaks"
//	when
//	then
//		Engine.Question("breaks");
//end

rule "qamort"
	when
		Fact(name("type"), val == "Trekkingowy");
	then
		Engine.Question("amort");
end

rule"qaddons"
	when
		not (Fact(name("who") , val == "Dziecko"));
		(
		Fact(name("type"), val == "Miejski")
		or
		Fact(name("type"), val == "Trekkingowy")
		)
	then
		Engine.Question("equip1");
end

rule "qaddons1"
	when
		not (Fact(name("who") , val == "Dziecko"));
		(
		Fact(name("type"), val == "Crossowy")
		or
		Fact(name("type"), val == "Górski")
		)
	then
		Engine.Question("equip");
end

rule "qaddons2"
	when
		Fact(name("who") , val == "Dziecko");
	then
		Engine.Question("equip2");
end

//___________M____________________________

rule "qheightmtb"
	when

		Fact(name("who"), val == "Mężczyzna");
		Fact(name("type"),val == "Górski");
	then
		Engine.Question("height-m-mtb-g");
end

rule "qheightmi"
	when

		Fact(name("who"), val == "Mężczyzna");
		(
			Fact(name("type"),val == "Trekkingowy");
			or
			Fact(name("type"),val == "Miejski");
			or
			Fact(name("type"),val == "Crossowy");
		)
	then
		Engine.Question("height-m-mi-trek");
		insert(new Fact("light","Tak"));
end

//___________K____________________________

rule "qheightmtbk"
	when

		Fact(name("who"), val == "Kobieta");
		Fact(name("type"),val == "Górski");
	then
		Engine.Question("height-k-mtb-g");
end

rule "qheightmik"
	when

		Fact(name("who"), val == "Kobieta");
		(
			Fact(name("type"),val == "Trekkingowy");
			or
			Fact(name("type"),val == "Miejski");
			or
			Fact(name("type"),val == "Crossowy");
		)
	then
		Engine.Question("height-k-mi-trek");
end

//____________Dziecko_____________________

rule "qsidewheels"
	when
		Fact(name("who"), val.equals("Dziecko"));
	then
		Engine.Question("sidewheels");
end

rule "qheight-d"
	when
		Fact(name("who"), val == "Dziecko");
	then
		Engine.Question("height-d");
end

rule "qsakwy"
	when
		Fact(val.equals("Sakwy rowerowe"));
	then
		Engine.Question("sakwy");
end
//-------Answer---------------------------

rule "atype"
	when
		f: Fact(name("type") , !val.equals("Nie wiem"))
	then
		Engine.Answer(f.getVal());
end

rule "atyped"
	when
		f: Fact(name("who") , val == "Dziecko");
	then
		Engine.Answer("Dziecięcy");
end

rule "adwsize1"
	when
		Fact(name("height") , val == "85 - 110");
	then
		Engine.Answer("Rozmiar ramy: 11 cali");
		Engine.Answer("Rozmiar koła: 12 cali");
end

rule "adwsize2"
	when
		Fact(name("height") , val == "110 - 120");
	then
		Engine.Answer("Rozmiar ramy: 12 cali");
		Engine.Answer("Rozmiar koła: 14 cali");
end

rule "adwsize3"
	when
		Fact(name("height") , val == "120 - 135");
	then
		Engine.Answer("Rozmiar ramy: 13 cali");
		Engine.Answer("Rozmiar koła: 16 cali");
end

rule "adwsize4"
	when
		Fact(name("height") , val == "135 - 145");
	then
		Engine.Answer("Rozmiar ramy: 14 cali");
		Engine.Answer("Rozmiar koła: 20 cali");
end

rule "adwsize5"
	when
		Fact(name("height") , val == "145 - +");
	then
		Engine.Answer("Rozmiar ramy: 15 cali");
		Engine.Answer("Rozmiar koła: 24 cali");
end

rule "asidewheels"
	when
		Fact(name("sidewheels") , val == "Tak");
	then
		Engine.Answer("z kółkami bocznymi");
		Engine.Propose("Kross Kido 2014 - 449 zł");
		Engine.Koszt(449);
end

rule "anosidewheels"
	when
		Fact(name("sidewheels") , val == "Nie");
	then
		Engine.Propose("Kross Mini 2014 - 243 zł");
		Engine.Koszt(243);
end

rule "aszheight1"
	when
		Fact(name("height") , val == "152 - 160");
		Fact(name("type") , val == "Szosowy");
	then
		Engine.Answer("Wielkość ramy: 50-52 cm");
		Engine.Answer("Długość wspornika kierownicy: 8-10 cm");
end

rule "aszheight2"
	when
		Fact(name("height") , val == "160 - 168");
		Fact(name("type") , val == "Szosowy");
	then
		Engine.Answer("Wielkość ramy: 52-54 cm");
		Engine.Answer("Długość wspornika kierownicy: 10-11 cm");end

rule "aszheight3"
	when
		Fact(name("height") , val == "168 - 175");
		Fact(name("type") , val == "Szosowy");
	then
		Engine.Answer("Wielkość ramy: 54-56 cm");
		Engine.Answer("Długość wspornika kierownicy: 11-12 cm");
end

rule "aszheight4"
	when
		Fact(name("height") , val == "175 - 183");
		Fact(name("type") , val == "Szosowy");
	then
		Engine.Answer("Wielkość ramy: 56-58 cm");
		Engine.Answer("Długość wspornika kierownicy: 12-13 cm");
end

rule "aszheight5"
	when
		Fact(name("height") , val == "183 - 191");
		Fact(name("type") , val == "Szosowy");
	then
		Engine.Answer("Wielkość ramy: 58-60 cm");
		Engine.Answer("Długość wspornika kierownicy: 13-14 cm");
end

rule "aszheight6"
	when
		Fact(name("height") , val == "191 - 198");
		Fact(name("type") , val == "Szosowy");
	then
		Engine.Answer("Wielkość ramy: 60-62 cm");
		Engine.Answer("Długość wspornika kierownicy: 14-15 cm");
end

rule "amtbk1"
	when
		Fact(name("height") , (val == "148 - 158"));
		Fact(name("type") , val == "Górski");
	then
		Engine.Answer("Wielkość ramy: S (15 cali)");
end

rule "amtbk2"
	when
		(
			Fact(name("height") , val == "158 - 168");
			or
			Fact(name("height") , val == "168 - 178");	
		)
		Fact(name("type") , val == "Górski");
	then
		Engine.Answer("Wielkość ramy: M (17 cali)");
end

rule "amtbk3"
	when
		Fact(name("height") , (val == "178 - 185"));
		Fact(name("type") , val == "Górski");
	then
		Engine.Answer("Wielkość ramy: L (19 cali)");
end

rule "amtbm"
	when
		(
			Fact(name("height") , (val == "185 - 193"));
			or
			Fact(name("height") , (val == "193 - 198"));
		)
		Fact(name("type") , val == "Górski");
		Fact(name("who") , val == "Mężczyzna");
	then
		Engine.Answer("Wielkość ramy: XL (21 cali)");
end

rule "ahtrek1"
	when
		(
			Fact(name("height") , (val == "152 - 160"));
			or
			Fact(name("height") , ( val == "160 - 168"));
		)
		(
			Fact(name("type") , (val == "Trekkingowy"));
			or
			Fact(name("type") , (val == "Crossowy"));
			or
			Fact(name("type") , (val == "Miejski"));
		)
	then
		Engine.Answer("Wielkość ramy: M (19 cali)");
end

rule "ahtrek2"
	when
		(
			Fact(name("height") , (val == "168 - 175" ));
			or
			Fact(name("height") , (val == "175 - 183"));
		)
		(
			Fact(name("type") , (val == "Trekkingowy" ));
			or
			Fact(name("type") , (val == "Crossowy" ));
			or
			Fact(name("type") , ( val == "Miejski"));
		)
	then
		Engine.Answer("Wielkość ramy: L (21 cali)");
end

rule "ahtrek3"
	when
		Fact(name("height") , (val == "183 - 191"));
		(
			Fact(name("type") , (val == "Trekkingowy" ));
			or
			Fact(name("type") , ( val == "Crossowy"));
			or
			Fact(name("type") , (val == "Miejski"));
		)
	then
		Engine.Answer("Wielkość ramy: XL (23 cali)");
end

rule "arkola1"
	when
		Fact(name("type"), val == "Miejski")
		or
		Fact(name("type"), val == "Trekkingowy")
		or
		Fact(name("type"), val == "Crossowy")
		or
		Fact(name("type"), val == "Szosowy")
	then
		Engine.Answer("Wielkość koła: 28 cali");
end

rule "arkola2"
	when
		Fact(name("type"), val == "Górski")
	then
		Engine.Answer("Wielkość koła: 26 cali");
end

rule "asakwy1"
	when
		Fact(name("sakwy"), val == "Tanie i niewielkie");
	then
		Engine.Addons("Sakwy Svartisen 2x17L - 85 zł");
		Engine.Koszt(85);
end

rule "asakwy2"
	when
		Fact(name("sakwy"), val == "Wytrzymałe i nieprzemakalne");
	then
		Engine.Addons("Sakwy Crosso Dry Big 60L - 210zł");
		Engine.Koszt(210);
end

rule "akoszyk"
	when
		Fact(name("equip"), val == "Koszyk przedni");
	then
		Engine.Addons("Koszyk przedni metal. B'TWIN 12L - 80zł");
		Engine.Koszt(80);
end

rule "anozka"
	when
		Fact(name("equip"), val == "Nóżka");
	then
		Engine.Addons("Stopka uniwersalna B'TWIN (24-28\") - 40zł");
		Engine.Koszt(40);
end

rule "abagaznik"
	when
		Fact(name("equip"), val == "Bagażnik");
	then
		Engine.Addons("Bagażnik CLASSIC B'TWIN - 100zł");
		Engine.Koszt(100);
end

rule "ablotnik"
	when
		Fact(name("equip"), val == "Błotniki");
	then
		Engine.Addons("Błotnik 24\"/26\" lub 28\" B'TWIN - 30zł");
		Engine.Koszt(30);
end

rule "arowertrek1"
	when
		Fact(name("type") , val == "Trekkingowy");
		Fact(name("amort") , val == "Tak");
		Fact(name("light2") , val == "Dynamo w piaście (zawsze dostępne, bez wad zwykłego dynamo)");
	then
		Engine.Propose("Kross Trans Siberian 2014 - 1499 zł");
		Engine.Koszt(1499);
end

rule "arowertrek2"
	when
		Fact(name("type") , val == "Trekkingowy");
		Fact(name("amort") , val == "Nie");
	then
		Engine.Propose("Grand Autan 2013 - 749 zł");
		Engine.Koszt(749);
end

rule "arowertrek3"
	when
		Fact(name("type") , val == "Trekkingowy");
		Fact(name("amort") , val == "Tak");
		not Fact(name("light2") , val == "Dynamo w piaście (zawsze dostępne, bez wad zwykłego dynamo)");
	then
		Engine.Propose("Kross Trans Atlantic 2014 - 1299 zł");
		Engine.Koszt(1299);
end

rule "arowergórski"
	when
		Fact(name("type") , val == "Górski");
	then
		Engine.Propose("RockRider 5.1 C1 B'TWIN - 800 zł");
		Engine.Koszt(800);
end

rule "akask"
	when
		not (Fact(name("who") , val == "Dziecko"));
		Fact(name("equip") , val == "Kask");
	then
		Engine.Addons("Kask CROSSFIRE niebieski 2013 BELL - 100 zł");
		Engine.Koszt(100);
end

rule "akaskd"
	when
		Fact(name("who") , val == "Dziecko");
		Fact(name("equip") , val == "Kask");
	then
		Engine.Addons("Kask Gavroche One Boy B'TWIN - 30 zł");
		Engine.Koszt(100);
end

rule "arowerszosowy"
	when
		Fact(name("type") , val == "Szosowy");
	then
		Engine.Propose("Rower szosowy TRIBAN 3 UK B'TWIN - 1600 zł");
		Engine.Koszt(1600);
end

rule "arowercrossowy"
	when
		Fact(name("type") , val == "Crossowy");
	then
		Engine.Propose("Kross Evado 1.0 2014 - 1400 zł");
		Engine.Koszt(1400);
end

rule "arowermmiejski"
	when
		Fact(name("type") , val == "Miejski");
	then
		Engine.Propose("Rower miejski Elops 1 B'TWIN - 600 zł");
		Engine.Koszt(600);
end

rule "aswiatlo1"
	when
		Fact(name("light2") , val == "Elektryczne (na baterie)");
	then
		Engine.Addons("Lumz zest. 10LUX + tylna B'TWIN\" - 90 zł");
		Engine.Koszt(90);
end